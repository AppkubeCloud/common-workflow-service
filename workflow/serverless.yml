service: workflow-lambda

frameworkVersion: '3'

useDotenv: true

plugins:
  - serverless-offline

provider:
  name: aws
  stage: dev
  timeout: 15
  runtime: nodejs18.x
  region: us-east-1

functions:

  getProjectOverview:
    handler: dashboard/getProjectOverview.handler 
    role: ${env:LAMBDA_ROLE}
    events:
    - httpApi:
        path: /project_usecase_overview
        method: get
        cors: true

  getAllProjectsOverview:
    handler: dashboard/getAllProjectsOverview.handler 
    role: ${env:LAMBDA_ROLE}
    events:
    - httpApi:
        path: /projects_usecase_overview
        method: get
        cors: true

  addWorkflowToProject:
    handler: project/addWorkflowToProject.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - httpApi:
          path: /project/workflow/new
          method: put     
          cors : true  

  allresources:
    handler: getallresources.handler
    role: ${env:LAMBDA_ROLE}
    events:
    - httpApi:
        path: /allresource
        method: get

  allresourcesbyfilter:
    handler: getallresourcebyfilter.handler
    role: ${env:LAMBDA_ROLE}
    events:
    - httpApi:
        path: /allresourcebyfilter
        method: get

  getOrgProjectDetails:
    handler: dashboard/getOrgProjectDetails.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - httpApi:
          path: /org_projects_overview
          method: get

  getOrgAllProjectStatusDetails:
    handler: dashboard/getOrgAllProjectStatusDetails.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - httpApi:
          path: /org_projects_status_overview
          method: get
  
  # allProject
  getProjects:
    handler: project/getProjects.handler 
    role: ${env:LAMBDA_ROLE}
    events:
    - httpApi:
        path: /project
        method: get
        cors: true

  getResources:
    handler: resource/getResources.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - httpApi:
          path: /resource
          method: get
          cors: true

  getProjectsOverview:
    handler: dashboard/getProjectsOverview.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - httpApi:
          path: /projects_overview
          method: get
          cors: true    

  getResourcesTasksStatus:
    handler: dashboard/getResourcesTasksStatus.handler
    role: ${env:LAMBDA_ROLE}
    events:
    - httpApi:
        path: /resouce_task_status
        method: get
        cors: true
 
  getAllResourcesTasksStatus:
    handler: dashboard/getAllResourcesTasksStatus.handler
    role: ${env:LAMBDA_ROLE}
    events:
    - httpApi:
        path: /resources_task_status
        method: get
        cors: true    

  getProjectsUsecases:
    handler: project/getProjectsUsecases.handler
    role: ${env:LAMBDA_ROLE}
    events:
    - httpApi:
        path:  /project/usecase/all
        method: get
        cors: true 

  getProjectsUsecaseByName:
    handler: project/getProjectsUsecaseByName.handler
    role: ${env:LAMBDA_ROLE}
    events:
    - httpApi:
        path: /project/usecase/{name}
        method: get
        cors: true 

  usecase_search:
    handler: usecase/usecase_search.handler
    role: ${env:LAMBDA_ROLE}
    events:
    - httpApi:
        path: /searchusecase
        method: get
        cors: true 

  addTeamToProject:
    handler: project/addTeamToProject.handler
    role: ${env:LAMBDA_ROLE}
    events:
    - httpApi:
        path: /project/team/new
        method: put
        cors: true
        
  delete_usecase:
    handler: project/delete_usecase.handler
    role: ${env:LAMBDA_ROLE}
    events:
    - httpApi:
        path: /project/usecase/delete
        method: delete
        cors: true

##searchbargetresourcebyname
  getResourcesByName:
    handler: misc/getResourcesByName.handler
    role: ${env:LAMBDA_ROLE}
    events:
    - httpApi:
        path: /get_resource_by_name
        method: get
        cors: true
  
  # addProject
  addProject:
    handler: project/addProject.handler
    role: ${env:LAMBDA_ROLE}
    events:
    - httpApi:
        path: /Project
        method: post
        cors: true
  #addusecase
  addusecase:
    handler: project/addusecase.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - httpApi:
          path: /project/usecase/new
          method: post
          cors: true
  # stages
  stageDetailsForCreatingUsecase:
    handler: project/stageDetailsForCreatingUsecase.handler
    role: ${env:LAMBDA_ROLE}
    events:
    - httpApi:
        path: /project/workflow/all
        method: get
        cors: true
  #assignStage
  assignStage:
    handler: project/assignStage.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - httpApi:
          path: /project/usecase/assign_stage
          method: put
          cors: true
  addStages:
    handler: addStages.handler
    role: ${env:LAMBDA_ROLE}
    events:
    - httpApi:
        path: /project/{usecase_id}/stages
        method: put
        cors: true        
  
  getTaskDetails:
    handler: task/getTaskDetails.handler
    role: ${env:LAMBDA_ROLE}
    events:
    - httpApi:
        path: /task/details
        method: get
        cors: true 

  startTask:
    handler: task/startTask.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - httpApi:
          path: /task/start
          method: put
          cors: true

  getResourcesByRole:
    handler: misc/getResourcesByRole.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - httpApi:
          path: /get_resource_by_role
          method: get
          cors: true

  assignTask:
    handler: project/assignTask.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - httpApi:
          path: /project/usecase/assign_task
          method: put
          cors: true

  deleteProject:
    handler: delete/deleteProject.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - httpApi:
          path: /deleteProject
          method: delete
          cors: true   

  DeleteStageFromUsecase:
    handler: usecase/DeleteStageFromUsecase.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - httpApi:
          path: /deleteStage
          method: delete
          cors: true
            
          
