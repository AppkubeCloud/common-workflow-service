service: workflow-lambda

frameworkVersion: '3'

useDotenv: true

plugins:
  - serverless-offline

provider:
  name: aws
  stage: dev
  timeout: 15
  runtime: nodejs18.x
  region: us-east-1

functions:

  getProjectsUsecaseOverview:
    handler: dashboard/getProjectsUsecaseOverview.handler 
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /projects_usecase_overview
        method: get
        cors: true
        
  getProjectResourceOverview:
    handler: dashboard/getProjectResourceOverview.handler 
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /projects_resource_overview
        method: get
        cors: true

  addWorkflow:
    handler: workflow/addWorkflow.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /workflow
          method: post     
          cors : true

  allresources:
    handler: getallresources.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /allresource
          method: get

  allresourcesbyfilter:
    handler: getallresourcebyfilter.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /allresourcebyfilter
          method: get

  getOrgProjectDetails:
    handler: dashboard/getOrgProjectDetails.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /org_projects_overview
          method: get
  
  # allProject
  getProjects:
    handler: project/getProjects.handler 
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /project
          method: get

  getResources:
    handler: resource/getResources.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /resource
          method: get
          cors: true

  getProjectsOverview:
    handler: dashboard/getProjectsOverview.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /projects_overview
          method: get
          cors: true    

  getResourcesTasksStatus:
    handler: dashboard/getResourcesTasksStatus.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /resources_task_status
          method: get
          cors: true

  getProjectsUsecases:
    handler: project/getProjectsUsecases.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path:  /project/usecase
          method: get
          cors: true 

  getProjectsUsecaseByName:
    handler: project/getProjectsUsecaseByName.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /project/usecase/{name}
          method: get
          cors: true 

  usecase_search:
    handler: usecase/usecase_search.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /searchusecase
          method: get
          cors: true 

  addTeamToProject:
    handler: project/addTeamToProject.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /project/team
          method: put
          cors: true
          # request:
          #     schemas:
          #       application/json: ${file(models/addTeamToProject.json)}
        
  deleteUsecase:
    handler: usecase/deleteUsecase.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: usecase/{id}
          method: delete
          cors: true

##searchbargetresourcebyname
  getResourcesByName:
    handler: misc/getResourcesByName.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /get_resource_by_name
          method: get
          cors: true
  
  # addProject
  addProject:
    handler: project/addProject.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /project
          method: post
          cors: true
          request:
              schemas:
                application/json: ${file(models/addProject.json)}
  #addusecase
  addusecase:
    handler: project/addusecase.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /project/usecase
          method: post
          cors: true

  getUsecaseDetails:
    handler: project/getUsecaseDetails.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /project/usecase/details
          method: get
          cors: true
  getProjectTeam:
    handler: project/getProjectTeam.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /project/team
          method: get
          cors: true
            
  getAllWorkflows:
    handler: project/getAllWorkflows.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /project/workflow/all
          method: get
          cors: true       
  #assignStage
  assignUsecase:
    handler: project/assignUsecase.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /project/usecase/assign_stage
          method: put
          cors: true
          request:
            schemas:
              application/json: ${file(models/assignUsecase.json)}

  addStage:
    handler: /project/addStage.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /project/{usecase_id}/stage
          method: put
          cors: true        
          request:
              schemas:
                application/json: ${file(models/addStage.json)}

  getTaskDetails:
    handler: task/getTaskDetails.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /task/details
          method: get
          cors: true 

  startTask:
    handler: task/startTask.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /task/{task_id}/start
          method: put
          cors: true

  getResourcesByRole:
    handler: misc/getResourcesByRole.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /get_resource_by_role
          method: get
          cors: true

  assignTask:
    handler: project/assignTask.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /project/usecase/assign_task
          method: put
          cors: true
          request:
            schemas:
              application/json: ${file(models/assignTask.json)}

  deleteProject:
    handler: delete/deleteProject.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /deleteProject
          method: delete
          cors: true   

  DeleteStageFromUsecase:
    handler: usecase/DeleteStageFromUsecase.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /deleteStage
          method: delete
          cors: true
  addResource :
    handler: resource/addResource.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /resource
          method: post
          cors: true           
          request:
            schemas:
              application/json: ${file(models/addresource.json)}

  getResourcesListView:
    handler: resource/getResourcesListView.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /resources/list
          method: get
          cors: true

  getProjectsWorkflows:
    handler: project/getProjectsWorkflows.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /project/workflows
          method: get
          cors: true

  projectsResourcesTasksStatus:
    handler: project/projectsResourcesTasksStatus.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /project/resource/taskstatus
          method: get
          cors: true

  completeTask:
    handler: project/completeTask.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /project/task/complete
          method: put
          cors: true

  getUsecases:
    handler: usecase/getUsecases.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /usecase
          method: get
          cors: true

  getUsecase :
    handler: usecase/getUsecase.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /usecase/{id}
          method: get
          cors: true

  updateUsecase :
    handler: usecase/updateUsecase.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /usecase/{id}
          method: put
          cors: true        

  getAllWorkflow:
    handler: workflow/getAllWorkflow.handler
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /workflow
          method: get     
          cors : true        