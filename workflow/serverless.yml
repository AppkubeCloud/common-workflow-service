service: workflow-lambda

frameworkVersion: '3'

useDotenv: true

plugins:
  - serverless-offline

provider:
  name: aws
  stage: dev
  timeout: 15
  runtime: nodejs18.x
  region: us-east-1

functions:

  getProjectOverview:
    handler: dashboard/getProjectOverview.getProjectOverview 
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /project_usecase_overview
        method: get
        cors: true

  getAllProjectsOverview:
    handler: dashboard/getAllProjectsOverview.getAllProjectsOverview 
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /projects_usecase_overview
        method: get
        cors: true

  addWorkflowToProject:
    handler: addWorkflowToProject.addWorkflowToProject
    role: ${env:LAMBDA_ROLE}
    events:
      - httpApi:
          path: / /project/workflow/new
          method: put       

  allresources:
    handler: getallresources.getallresource
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /allresource
        method: get

  allresourcesbyfilter:
    handler: getallresourcebyfilter.getallresourcebyfilter
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /allresourcebyfilter
        method: get

  getOrgProjectDetails:
    handler: dashboard/getOrgProjectDetails.getOrgProjectDetails
    role: ${env:LAMBDA_ROLE}
    events:
      - httpApi:
          path: /org_projects_overview
          method: get

  getOrgAllProjectStatusDetails:
    handler: dashboard/getOrgAllProjectStatusDetails.getOrgAllProjectStatusDetails
    role: ${env:LAMBDA_ROLE}
    events:
      - httpApi:
          path: /org_projects_status_overview
          method: get
  
  # allProject
  getProjects:
    handler: project/getProjects.getProjects 
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /project
        method: get
        cors: true

  getResources:
    handler: resource/getResources.getResources
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /resource
          method: get
          cors: true

  getProjectsOverview:
    handler: dashboard/getProjectsOverview.getProjectsOverview
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /projects_overview
          method: get
          cors: true    

  getResourcesTasksStatus:
    handler: dashboard/getResourcesTasksStatus.getResourcesTasksStatus
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /resouce_task_status
        method: get
        cors: true
 
  getAllResourcesTasksStatus:
    handler: dashboard/getAllResourcesTasksStatus.getAllResourcesTasksStatus
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /resources_task_status
        method: get
        cors: true    

  getProjectsUsecases:
    handler: project/getProjectsUsecases.getProjectsUsecases
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path:  /project/usecase
        method: get
        cors: true 

  getProjectsUsecaseByName:
    handler: project/getProjectsUsecaseByName.getProjectsUsecaseByName
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /project/usecase/{name}
        method: get
        cors: true 

  usecase_search:
    handler: usecase/usecase_search.usecase_search
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /searchusecase
        method: get
        cors: true 

  addTeamToProject:
    handler: project/addTeamToProject.addTeamToProject
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /project/team/new
        method: put
        cors: true
  delete_usecase:
    handler: project/delete_usecase.delete_usecase
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /project/usecase/delete
        method: put
        cors: true

##searchbargetresourcebyname
  getResourcesByName:
    handler: misc/getResourcesByName.getResourcesByName
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /get_resource_by_name
        method: get
        cors: true
  
  # addProject
  addProject:
    handler: project/addProject.addProject
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /Project
        method: post
        cors: true
  #addusecase
  addusecase:
    handler: project/addusecase.addusecase
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /project/usecase/new
          method: post
          cors: true
  # stages
  stageDetailsForCreatingUsecase:
    handler: project/stageDetailsForCreatingUsecase.stageDetailsForCreatingUsecase
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /project/workflow/all
        method: get
        cors: true
  #assignStage
  assignStage:
    handler: project/assignStage.assignStage
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /project/usecase/assign_stage
          method: put
          cors: true
  addStages:
    handler: addStages.addStages
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /project/{usecase_id}/stages
        method: put
        cors: true        
  
  getTaskDetails:
    handler: task/getTaskDetails.getTaskDetails
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /task/details
        method: get
        cors: true 

  startTask:
    handler: task/startTask.startTask
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /task/start
          method: put
          cors: true

  getResourcesByRole:
    handler: misc/getResourcesByRole.getResourcesByRole
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /get_resource_by_role
          method: get
          cors: true

  assignTask:
    handler: project/assignTask.assignTask
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /project/usecase/assign_task
          method: put
          cors: true

  deleteProject:
    handler: delete/deleteProject.deleteProject
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /deleteProject
          method: delete
          cors: true       
          
