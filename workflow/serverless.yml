service: workflow-lambda

frameworkVersion: '3'

useDotenv: true

plugins:
  - serverless-offline

provider:
  name: aws
  stage: dev
  timeout: 15
  runtime: nodejs18.x
  region: us-east-1

functions:
  GetProjectList:
    handler: project/getProject.getProject
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /project
          method: get
          cors: true

  GetProjectWithFilter:
    handler: project/getProjectWithFilter.getProjectWithFilter
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /project-with-filter
          method: get
          cors: true

  getProjectOverview:
    handler: project/getProjectOverview.getProjectOverview 
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /project_usecase_overview
        method: get
        cors: true

  getAllProjectsOverview:
    handler: project/getAllProjectsOverview.getAllProjectsOverview 
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /projects_usecase_overview
        method: get
        cors: true

  allresources:
    handler: getallresources.getallresource
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /allresource
        method: get

  allresourcesbyfilter:
    handler: getallresourcebyfilter.getallresourcebyfilter
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /allresourcebyfilter
        method: get

  filters:
    handler: filters.filters
    role: ${env:LAMBDA_ROLE}
    events:
      - httpApi:
          path: /filter
          method: get


  getprojectstasks:
    handler: getprojectstasks.getprojectstasks
    role: ${env:LAMBDA_ROLE}
    events:
      - httpApi:
          path: /getprojectstasks
          method: get

  projectfilters:
    handler: projectfilters.projectfilters
    role: ${env:LAMBDA_ROLE}
    events:
      - httpApi:
          path: /projectfilters
          method: get      
  
  # allProject
  getProjects:
    handler: allProject/getProjects.getProjects 
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /projects
        method: get
        cors: true

  GetResourceList:
    handler: resource/getResourceList.getResourceList
    role: ${env:LAMBDA_ROLE}
    events:
      - http:
          path: /resource_list
          method: get
          cors: true

  getProjectsOverview:
    handler: project/getProjectsOverview.getProjectsOverview
    role: ${env:LAMBDA_ROLE}
    events:
      - httpApi:
          path: /projects_overview
          method: get    

  getResource:
    handler: project/get_resourcetask.get_resourcetask
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /resource
        method: get
        cors: true
 
  getAllResource:
    handler: project/get_allresourcetask.get_allresourcetask
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /allresource
        method: get
        cors: true    

  usecasedetails:
    handler: usecase/usecase_details.get_usecasedetails
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /usecasedetails
        method: get
        cors: true 

  usecase_search:
    handler: usecase/usecase_search.usecase_search
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /searchusecase
        method: get
        cors: true 
##searchbargetresourcebyname
  getResourcesByName:
    handler: resource/getResourcesByName.getResourcesByName
    role: ${env:LAMBDA_ROLE}
    events:
    - http:
        path: /get_resource_by_name
        method: get
        cors: true